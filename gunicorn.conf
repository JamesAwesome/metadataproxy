import os
import multiprocessing
import uuid

bind = "0.0.0.0:80"
worker_class = "gevent"

# Access log format:
# [time] "request" status bytes_received bytes_sent microsecond_response_time "X-Forwarded-For_header" "User-Agent_header" obscured_user_id remote_user_header "unique_id" "Accept_header"
# Use quotes (") for values that may have space in them (eg headers). Gunicorn
# will automatically escape any quotes in the value:
#     "my-user-agent-\"-with-quote"
access_log_format  = '"%(r)s" %(s)s %({Content-Length}i)s %(b)s %(D)s "%({X-Forwarded-For}i)s" "%(a)s" - %(u)s "%({X-Request-Id}i)s" "%({Accept}i)s"'
accesslog = '-'

if os.getenv('SERVICE_INSTANCE') == 'development':
  reload = True
  reload_extra_files = ['/root/.aws/credentials']
  loglevel = "debug"
  workers = 1
else:
  reload = False
  preload = True
  workers = multiprocessing.cpu_count() * 2 + 1
proc_name = os.getenv('IMAGE_NAME') + "." + os.getenv("CONTAINER_NAME")
forwarded_allow_ips = '*'

def pre_request(worker, req):
    pre_request_add_request_id(worker, req)


def pre_request_add_request_id(worker, req):
  for h in req.headers:
    # all request header name are upper cased in a gunicorn request.
    if 'X-REQUEST-ID' == h[0]:
      # There is a X-Request-ID header set. Don't set our own.
      return
    # We haven't found a request-id header. Add one with a our own generated
    # request id.
    req.headers.append(('X-REQUEST-ID', str(uuid.uuid1())))
